name: test - action/build-init
on:
  push:
    branches: [main]
    paths:
      - .test/**
      - .github/workflows/test-action-build-init.yml
      - actions/ansible-docs-build-init/**
  pull_request:
    paths:
      - .test/**
      - .github/workflows/test-action-build-init.yml
      - actions/ansible-docs-build-init/**

jobs:
  tests:
    name: Init [ver=${{ matrix.antsibull-docs-version }}, skip=${{ matrix.skip-init }}, lenient=${{ matrix.lenient }}, fail-on-error=${{ matrix.fail-on-error }}, dest=${{ matrix.dest }}, collections=${{ matrix.collections }}, link-targets=${{ matrix.provide-link-targets != '' }}]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        skip-init: [false]
        collections:
          - ''
          - 'fake.collection'
          - 'first.collection second.collection'
        dest: ['']
        antsibull-docs-version:
          - ''  # there is no default so this will be ok
          - 1.0.0
          - main
        lenient:
          - true
          - false
        fail-on-error:
          - true
          - false
        provide-link-targets:
          - ''
          - |
            outside_reference_1
            outside_reference_2
        include:
          - skip-init: true
            dest: .test/simple-build
            lenient: false  # unused but needs a value
            fail-on-error: false  # unused but needs a value
            provide-link-targets: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      # if we pass an empty string to dest-dir, it will override the default.
      # we can't copy the default into the matrix because it uses a templating
      # context (runner) that's unavailable in matrix.
      # We can't use two steps with opposing conditionals because we can't re-use
      # the id (and we need it in later steps).
      - name: Init
        id: init
        uses: ./actions/ansible-docs-build-init
        with:
          collections: ${{ matrix.collection }}
          # combining runner.temp and /docsbuild copies the default from the action
          # please keep in sync!
          dest-dir: ${{ matrix.dest || format('{0}/{1}', runner.temp, '/docsbuild') }}
          skip-init: ${{ matrix.skip-init }}
          antsibull-docs-version: ${{ matrix.antsibull-docs-version }}
          lenient: ${{ matrix.lenient }}
          provide-link-targets: ${{ matrix.provide-link-targets }}

      - name: assert
        env:
          output_build_script: ${{ steps.init.outputs.build-script }}
          output_build_html: ${{ steps.init.outputs.build-html }}
        run: |
          # check that the build script exists
          [ -f "$output_build_script" ] || exit 1

          # html dir is not guaranteed to exist but it is always at the same relative path
          # we'll use this to get to the "root" (dest-dir), even when we used a defaulted dir.
          mkdir -p "$output_build_html"
          cd "$output_build_html/../.."

          # by now, all requirements should have been installed, let's pip freeze
          pip freeze > "${{ runner.temp }}/pre-freeze.txt"

          # now we'll try to do a pip install again with the requirements file
          pip install -r "requirements.txt" --disable-pip-version-check

          # and pip freeze again to compare
          pip freeze > "${{ runner.temp }}/post-freeze.txt"

          cmp "${{ runner.temp }}/pre-freeze.txt" "${{ runner.temp }}/post-freeze.txt" || exit 1

          # check if lenient mode was used
          # if lenient == 'true', the grep should fail and end up running the true command
          # if lenient == 'false', the grep should succeed and never run the false command
          # short circuit if skip-init is 'true'
          ${{ matrix.skip-init }} || grep -- '^nitpicky = True$' conf.py || ${{ matrix.lenient }} || exit 1

          # check if fail-on-error mode was used
          # if fail-on-error == 'true', the grep should fail (!succeed) and end up running the true command
          # if fail-on-error == 'false', the grep should succeed (!fail) and never run the false command
          # short circuit if skip-init is 'true'
          ${{ matrix.skip-init }} || ! grep -- '--fail-on-error' conf.py || ${{ matrix.fail-on-error }} || exit 1

          # check if provide-link-targets was used (being no empty)
          # :orphan: and the labels mentioned in provide-link-targets should end up in rst/_targets.rst
          # short circuit if skip-init is 'true' or matrix.provide-link-targets is empty
          ${{ matrix.skip-init }} || ${{ matrix.provide-link-targets == '' }} || grep -- '^:orphan:$' rst/_targets.rst || exit 1
          ${{ matrix.skip-init }} || ${{ matrix.provide-link-targets == '' }} || grep -- '^.. _outside_reference_1:$' rst/_targets.rst || exit 1
          ${{ matrix.skip-init }} || ${{ matrix.provide-link-targets == '' }} || grep -- '^.. _outside_reference_2:$' rst/_targets.rst || exit 1
          ${{ matrix.skip-init }} || ${{ matrix.provide-link-targets == '' }} || (pip install rstcheck && rstcheck --report warning rst/_targets.rst) || exit 1

          # check if provide-link-targets was not used when being empty
          # short circuit if skip-init is 'true' or matrix.provide-link-targets is not empty
          ${{ matrix.skip-init }} || ${{ matrix.provide-link-targets != '' }} || ! test -e rst/_targets.rst || exit 1
