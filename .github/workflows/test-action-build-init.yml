name: test - action/build-init
on:
  push:
    branches: [main]
    paths:
      - .test/**
      - .github/workflows/test-action-build-init.yml
      - actions/ansibe-docs-build-init/**
  pull_request:
    paths:
      - .test/**
      - .github/workflows/test-action-build-init.yml
      - actions/ansibe-docs-build-init/**

jobs:
  tests:
    name: Init tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        skip-init: [false]
        collections:
          - ''
          - 'fake.collection'
          - 'first.collection second.collection'
        dest: ['']
        include:
          - skip-init: true
            dest: .test/simple-build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # if we pass an empty string to dest-dir, it will override the default.
      # we can't copy the default into the matrix because it uses a templating
      # context (runner) that's unavailable in matrix.
      # We can't use two steps with opposing conditionals because we can't re-use
      # the id (and we need it in later steps).
      - name: Init
        id: init
        uses: ./actions/ansible-docs-build-init
        with:
          collections: ${{ matrix.collection }}
          # combining runner.temp and /docsbuild copies the default from the action
          # please keep in sync!
          dest-dir: ${{ matrix.dest || format('{0}/{1}', runner.temp, '/docsbuild') }}
          skip-init: ${{ matrix.skip-init }}

      - name: assert
        env:
          output_build_script: ${{ steps.init.outputs.build-script }}
          output_build_html: ${{ steps.init.outputs.build-html }}
        run: |
          # check that the build script exists
          [ -f "$output_build_script" ] || exit 1

          # html dir is not guaranteed to exist but it is always at the same relative path
          # we'll use this to get to the "root" (dest-dir), even when we used a defaulted dir.
          mkdir -p "$output_build_html"
          cd "$output_build_html/../.."

          # by now, all requirements should have been installed, let's pip freeze
          pip freeze > "${{ runner.temp }}/pre-freeze.txt"

          # now we'll try to do a pip install again with the requirements file
          pip install -r "requirements.txt" --disable-pip-version-check

          # and pip freeze again to compare
          pip freeze > "${{ runner.temp }}/post-freeze.txt"

          cmp "${{ runner.temp }}/pre-freeze.txt" "${{ runner.temp }}/post-freeze.txt" || exit 1
