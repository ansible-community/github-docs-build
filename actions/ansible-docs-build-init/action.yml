---
name: Initialize the environment for building Ansible docs
description: Sets up various requirements and preparation for building Ansible docs. Requires Python.
inputs:
  dest-dir:
    description: The destination directory for preparing the build environment. Note that this must be within the Workspace for hashes to be calculated.
    required: false
    default: ${{ runner.temp }}/docsbuild
  collections:
    description: |
      Limit the docs build to one or more collections, in the form namespace.collection.
      Multiple collections should be separated by spaces.
      If this isn't limited, then all collections in the collections path will be included in the built docs.
    required: false
  skip-init:
    description: |
      If 'true', dest-dir will be assumed to already be initialized, so this action will only install
      antsibull-docs and the contents of the requirements.txt file in dest-dir.
    required: false
    default: 'false'
  fail-on-error:
    description: |
      Corresponds to the --fail-on-error flag in antsibull-docs. Fails if plugins cannot be parsed.
      Has no effect if skip-init is true.
    required: false
    default: 'false'
  lenient:
    description: |
      Corresponds to the --lenient flag for antsibull-docs sphinx-init.
      By default, the build process will fail on warnings unless this is set to 'true'.
      Has no effect if skip-init is true.
    required: false
    default: 'false'
  antsibull-docs-version:
    description: |
      The version of antsibull-docs to install. When set, it refers to a git ref from which to install.
      If not set, the latest version from PyPI is installed.
    required: false
  provide-link-targets:
    description: A newline separated list of link targets that should not cause reference errors. A small RST file will be created during the build which contains these labels.
    required: false
    type: string
  intersphinx-links:
    description: |
      A newline separated list of entries to add to the intersphinx_mapping in the generated conf.py.
      Use the syntax `identifier:https://server/path` to add the identifier `identifier` with URL
      `https://server/path`.
    required: false
    type: string
outputs:
  build-script:
    description: The path of the build script to execute.
    value: ${{ steps.init.outputs.build-script }}
  build-html:
    description: The path of the build's html output directory.
    value: ${{ steps.init.outputs.build-html }}

runs:
  using: composite
  steps:
    - name: Install antsibull-docs and Initialize Sphinx
      id: init
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: '1'
        _INPUT_PROVIDE_LINK_TARGETS: ${{ inputs.provide-link-targets }}
        _INPUT_INTERSPHINX_LINKS: ${{ inputs.intersphinx-links }}
      shell: bash
      run: |
        echo "::group::Installing antsibull-docs"
        if [[ "${{ inputs.antsibull-docs-version }}" != "" ]] ; then
            pip install https://github.com/ansible-community/antsibull-docs/archive/${{ inputs.antsibull-docs-version }}.tar.gz
        else
            pip install antsibull-docs
        fi
        antsibull-docs --version
        echo "::endgroup::"

        if [[ "${{ inputs.skip-init }}" != "true" ]] ; then
            echo "::group::Create destination directory"
            mkdir -p "${{ inputs.dest-dir }}"
            echo "::endgroup::"

            INTERSPHINX_ARGS=()

            if [[ "${_INPUT_INTERSPHINX_LINKS}" != "" ]]; then
                echo "::group::Building list of intersphinx links"
                while read -r line; do
                    if [ "${line}" != "" ]; then
                        INTERSPHINX_ARGS+=("--intersphinx" "${line}")
                    fi
                done <<< "${_INPUT_INTERSPHINX_LINKS}"
                echo "Intersphinx args: ${INTERSPHINX_ARGS[@]}"
                echo "::endgroup::"
            fi

            echo "::group::Initialize Sphinx"
            antsibull-docs sphinx-init --use-current ${{ fromJSON(inputs.fail-on-error) && '--fail-on-error' || '' }} ${{ fromJSON(inputs.lenient) && '--lenient' || '' }} --dest-dir "${{ inputs.dest-dir }}" ${{ inputs.collections }} ${INTERSPHINX_ARGS[@]}
            echo "::endgroup::"
        fi

        if [[ "${_INPUT_PROVIDE_LINK_TARGETS}" != "" ]]; then
            echo "::group::Create small RST file for link"
            mkdir -p "${{ inputs.dest-dir }}/rst"
            echo ":orphan:" > "${{ inputs.dest-dir }}/rst/_targets.rst"
            echo "" >> "${{ inputs.dest-dir }}/rst/_targets.rst"
            while read -r line; do
              if [ "${line}" != "" ]; then
                echo ".. _${line}:" >> "${{ inputs.dest-dir }}/rst/_targets.rst"
              fi
            done <<< "${_INPUT_PROVIDE_LINK_TARGETS}"
            echo "" >> "${{ inputs.dest-dir }}/rst/_targets.rst"
            echo "Replacement stub for existing reference" >> "${{ inputs.dest-dir }}/rst/_targets.rst"
            echo "=======================================" >> "${{ inputs.dest-dir }}/rst/_targets.rst"
            echo "" >> "${{ inputs.dest-dir }}/rst/_targets.rst"
            echo "This file just exists to provide link targets. Please ignore it." >> "${{ inputs.dest-dir }}/rst/_targets.rst"
            echo "Content of ${{ inputs.dest-dir }}/rst/_targets.rst:"
            echo ""
            cat "${{ inputs.dest-dir }}/rst/_targets.rst"
            echo "::endgroup::"
        fi

        echo "::group::Install additional requirements"
        pip install -r "${{ inputs.dest-dir }}/requirements.txt"
        echo "::endgroup::"

        echo "::set-output name=build-script::${{ inputs.dest-dir }}/build.sh"
        echo "::set-output name=build-html::${{ inputs.dest-dir }}/build/html"
